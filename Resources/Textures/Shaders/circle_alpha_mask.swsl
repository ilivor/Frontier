light_mode unshaded;

// Radius of the circle in pixels.
uniform highp float radius;

// Screen-space center of the circle in pixels.
uniform highp vec2 center;

// If x <= edge0, returns 1.
// If x >= edge1, returns 0.
// Linearly interpolates from 1 to 0 between edge0 and edge1.
highp float linearStep(highp float edge0, highp float edge1, highp float x) {
    return clamp((edge1 - x) / (edge1 - edge0), 0.0, 1.0);
}

void fragment() {
    // Fragment (pixel) position relative to the screen-space center passed in by script.
    highp vec2 position = FRAGCOORD.xy - center;

    // Since the coordinate space is now relative to the center, the length of the coordinates is now also the distance from the center.
    // This is the same exact principle as getting the length of, say, a world position to get the distance from the world origin (0, 0).
    highp float dist = length(position);

    // The diagonal length of one screen pixel.
    highp float onePixelUV = length(SCREEN_PIXEL_SIZE.xy);

    // Apply a 1 screen pixel alpha gradient for anti-aliasing.
    highp float edgeAlpha = linearStep(radius - onePixelUV, radius, dist);

    // Grab the texture color so stuff like text works and not just primitives.
    highp vec4 color = zTexture(UV);

    // All we do is apply a simple alpha multiplier.
    COLOR = vec4(color.rgb, color.a * edgeAlpha);
}